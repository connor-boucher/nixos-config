#+TITLE: Config

** UI
#+BEGIN_SRC emacs-lisp
  ;; Disable UI elements
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Apply a custom font
  (set-frame-font "JetBrains Mono 12" nil t)

  ;; Disable backup files
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  ;; Disable the default startup screen
  (setq inhibit-startup-message t)

  ;; Set relative line numbers
  (setq display-line-numbers-type 'relative)

  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)

  ;; Show parent parentheses
  (show-paren-mode 1)

  ;; Highlight current line
  (global-hl-line-mode t)

  ;; Enable prettify symbols mode
  (global-prettify-symbols-mode t)
#+END_SRC

** Editor
#+BEGIN_SRC emacs-lisp
  ;; Use y-or-n alias
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Assign config files to their own registers
  (set-register ?i (cons 'file user-init-file))
  (set-register ?c (cons 'file (concat user-emacs-directory "config.org")))
#+END_SRC

** Packages
#+BEGIN_SRC emacs-lisp
  ;; use-package settings
  (setq use-package-always-ensure t)
  (setq use-package-always-defer t)

  ;; diminish - Suppress some keys from which-key
  (use-package diminish)

  ;; evil - Vim-like keybindings
  (use-package evil
    :defer nil
    :init
    (evil-mode))

  ;; which-key - Helpful reminders for keybindings
  (use-package which-key
    :diminish which-key-mode
    :init
    (which-key-mode))

  ;; lsp-mode - LSP support for emacs
  ;;(use-package lsp-mode)

  ;; dashboard - Custom emacs welcome screen
  (use-package dashboard
    :init
    (dashboard-setup-startup-hook))

  ;; avy - Quickly jump cursor to characters
  (use-package avy
    :bind
    ("C-c s" . avy-goto-char))

  ;; corfu - Completion library
  (use-package corfu
    :custom
    (corfu-auto t)
    :init
    (global-corfu-mode))

  ;; cape - Populates completions
  (use-package cape
    :init
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block))

  ;; vertico - Vertical minibuffer completion
  (use-package vertico
    :init
    (vertico-mode))

  ;; consult - Provides commands that improve upon built-in functionality
  (use-package consult
    :bind
    (;; C-c bindings in `mode-specific-map'
     ("C-c M-x" . consult-mode-command)
     ("C-c h" . consult-history)
     ("C-c k" . consult-kmacro)
     ("C-c m" . consult-man)
     ("C-c i" . consult-info)
     ([remap Info-search] . consult-info)
     ;; C-x bindings in `ctl-x-map'
     ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
     ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
     ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
     ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
     ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
     ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
     ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
     ;; Custom M-# bindings for fast register access
     ("M-#" . consult-register-load)
     ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
     ("C-M-#" . consult-register)
     ;; Other custom bindings
     ("M-y" . consult-yank-pop)                ;; orig. yank-pop
     ;; M-g bindings in `goto-map'
     ("M-g e" . consult-compile-error)
     ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
     ("M-g g" . consult-goto-line)             ;; orig. goto-line
     ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
     ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
     ("M-g m" . consult-mark)
     ("M-g k" . consult-global-mark)
     ("M-g i" . consult-imenu)
     ("M-g I" . consult-imenu-multi)
     ;; M-s bindings in `search-map'
     ("M-s d" . consult-find)                  ;; Alternative: consult-fd
     ("M-s c" . consult-locate)
     ("M-s g" . consult-grep)
     ("M-s G" . consult-git-grep)
     ("M-s r" . consult-ripgrep)
     ("M-s l" . consult-line)
     ("M-s L" . consult-line-multi)
     ("M-s k" . consult-keep-lines)
     ("M-s u" . consult-focus-lines)
     ;; Isearch integration
     ("M-s e" . consult-isearch-history)
     :map isearch-mode-map
     ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
     ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
     ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
     ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
     ;; Minibuffer history
     :map minibuffer-local-map
     ("M-s" . consult-history)                 ;; orig. next-matching-history-element
     ("M-r" . consult-history)))               ;; orig. previous-matching-history-element

  ;; marginalia - Useful minibuffer information in margins
  (use-package marginalia
    :init
    (marginalia-mode))

  ;; treemacs - File tree for emacs
  (use-package treemacs)

  ;; magit - Fully featured git client
  (use-package magit)

  ;; doom-modeline - Aesthetic modeline
  (use-package doom-modeline
    :init
    (doom-modeline-mode))

  ;; doom-themes - Editor themes and colorschemes
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
    :init
    (load-theme 'doom-nord t))
#+END_SRC
