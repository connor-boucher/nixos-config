#+TITLE: Config
#+AUTHOR: Connor Boucher
#+DESCRIPTION: My opinionated emacs configuration
#+OPTIONS: toc:2

* Table of Contents :toc:

* UI
#+BEGIN_SRC emacs-lisp
  ;; Disable UI elements
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Disable the default startup screen
  (setq inhibit-startup-message t)

  ;; Set relative line numbers
  (setq display-line-numbers-type 'relative)

  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)

  ;; Increase default line spacing
  (setq line-spacing 2)

  ;; Show column numbers in modeline
  (column-number-mode)

  ;; Show parent parentheses
  (show-paren-mode 1)

  ;; Highlight current line
  (global-hl-line-mode t)

  ;; Enable prettify symbols mode
  (global-prettify-symbols-mode t)

  ;; Enable background transparency
  (add-to-list 'default-frame-alist '(alpha-background . 90))
#+END_SRC

* Editor
#+BEGIN_SRC emacs-lisp
;; Disable lockfiles
(setq create-lockfiles nil)

;; Disable backup files
(setq make-backup-files nil)
(setq auto-save-default nil)

;; Use y-or-n alias
(defalias 'yes-or-no-p 'y-or-n-p)

;; Confirm before closing emacs
(setq confirm-kill-emacs 'yes-or-no-p)

;; Disable all GUI popups
(setq use-dialog-box nil)

;; Make scrolling less jarring
(setq scroll-conservatively 101)
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3)))
(setq mouse-wheel-progressive-speed t)
(setq mouse-wheel-follow-mouse 't)

;; Allow selected text to be deleted and replaced with new input
(delete-selection-mode t)

;; Enable increasing and decreasing font size
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)

;; Assign config files to their own registers
(set-register ?i (cons 'file user-init-file))
(set-register ?c (cons 'file (concat user-emacs-directory "config.org")))

;; Don't destroy all indentation when editing code in org mode
(setq org-src-tab-acts-natively t)
(setq org-src-preserve-indentation t)

;; Use org-indent-mode for org mode files
(add-hook 'org-mode-hook 'visual-line-mode)
(add-hook 'org-mode-hook 'org-indent-mode)

;; Cleanup trailing whitespace
(add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

* Packages
#+BEGIN_SRC emacs-lisp
;; use-package settings
(setq use-package-always-ensure t)
(setq use-package-always-defer t)

;; diminish - Suppress some keys from which-key
(use-package diminish)

;; evil - Vim-like keybindings
(use-package evil
  :defer nil
  :config
  (defun cb/save-and-kill-this-buffer ()
    (interactive)
    (save-buffer)
    (kill-current-buffer))

  ;;Adapt :q and :wq to kill buffer instead of window
  (evil-ex-define-cmd "q" 'kill-this-buffer)
  (evil-ex-define-cmd "wq" 'cb/save-and-kill-this-buffer)

  ;; More intuitive split directions
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  :init
  (evil-mode))

;; which-key - Helpful reminders for keybindings
(use-package which-key
  :diminish which-key-mode
  :init
  (which-key-mode))

;; lsp-mode - LSP support for emacs
(use-package lsp-mode
  :commands (lsp lsp-defer)
  :config
  (lsp-enable-which-key-integration t))

;; dashboard - Custom emacs welcome screen
(use-package dashboard
  :init
  (dashboard-setup-startup-hook))

;; avy - Quickly jump cursor to characters
(use-package avy
  :bind
  ("C-c s" . avy-goto-char))

;; corfu - Completion library
(use-package corfu
  :after lsp-mode
  :custom
  (corfu-auto t)
  :init
  (global-corfu-mode))

;; cape - Populates completions
(use-package cape
  :init
  (add-hook 'completion-at-point-functions #'cape-dabbrev)
  (add-hook 'completion-at-point-functions #'cape-file)
  (add-hook 'completion-at-point-functions #'cape-elisp-block))

;; vertico - Vertical minibuffer completion
(use-package vertico
  :init
  (vertico-mode))

;; consult - Provides commands that improve upon built-in functionality
(use-package consult
  :bind
  (;; C-c bindings in `mode-specific-map'
   ("C-c M-x" . consult-mode-command)
   ("C-c h" . consult-history)
   ("C-c k" . consult-kmacro)
   ("C-c m" . consult-man)
   ("C-c i" . consult-info)
   ([remap Info-search] . consult-info)
   ;; C-x bindings in `ctl-x-map'
   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
   ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
   ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
   ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
   ;; Custom M-# bindings for fast register access
   ("M-#" . consult-register-load)
   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
   ("C-M-#" . consult-register)
   ;; Other custom bindings
   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
   ;; M-g bindings in `goto-map'
   ("M-g e" . consult-compile-error)
   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
   ("M-g g" . consult-goto-line)             ;; orig. goto-line
   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
   ("M-g m" . consult-mark)
   ("M-g k" . consult-global-mark)
   ("M-g i" . consult-imenu)
   ("M-g I" . consult-imenu-multi)
   ;; M-s bindings in `search-map'
   ("M-s d" . consult-find)                  ;; Alternative: consult-fd
   ("M-s c" . consult-locate)
   ("M-s g" . consult-grep)
   ("M-s G" . consult-git-grep)
   ("M-s r" . consult-ripgrep)
   ("M-s l" . consult-line)
   ("M-s L" . consult-line-multi)
   ("M-s k" . consult-keep-lines)
   ("M-s u" . consult-focus-lines)
   ;; Isearch integration
   ("M-s e" . consult-isearch-history)
   :map isearch-mode-map
   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
   ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
   ;; Minibuffer history
   :map minibuffer-local-map
   ("M-s" . consult-history)                 ;; orig. next-matching-history-element
   ("M-r" . consult-history)))               ;; orig. previous-matching-history-element

;; marginalia - Useful minibuffer information in margins
(use-package marginalia
  :init
  (marginalia-mode))

;; treemacs - File tree for emacs
(use-package treemacs)

;; treemacs-nerd-icons - Better treemacs icons
(use-package nerd-icons)
(use-package treemacs-nerd-icons
  :after treemacs
  :config
  (treemacs-load-theme "nerd-icons"))

;; magit - Fully featured git client
(use-package magit)

;; doom-modeline - Aesthetic modeline
(use-package doom-modeline
  :init
  (doom-modeline-mode))

;; org-bullets - Beautiful org mode bullets
(use-package org-bullets
  :hook
  (org-mode . org-bullets-mode))
#+END_SRC
